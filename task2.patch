From ce9950b9f7d6bbfde0835a3f66f4b98ef65b9597 Mon Sep 17 00:00:00 2001
From: GoodnessJames <akomagoodness97@gmail.com>
Date: Fri, 27 Oct 2023 00:47:54 +0100
Subject: [PATCH 1/2] Modify main app component of client side

---
 src/App.tsx | 29 +++++++++++++++++++++++------
 1 file changed, 23 insertions(+), 6 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..b3ac3e8 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,8 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  //Add showGraph property
+  showGraph: boolean,  
 }
 
 /**
@@ -22,6 +24,8 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      // Set the showGraph to false to enable the graph to show when 'Start Streaming' button is clicked
+      showGraph: false,
     };
   }
 
@@ -29,18 +33,31 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    //Render graph when the application state’s showGraph property is true.
+    if (this.state.showGraph) {
+      return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    //Modify method to contact the server and get data from it continuously
+    let x = 0;
+    const interval = setInterval(() => {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+      // Update setState method
+        this.setState({
+          data: serverResponds,
+          showGraph: true,
+        });
+      });
+      x++;
+      if (x > 1000) {
+        clearInterval(interval);
+      }
+    }, 100);
   }
 
   /**
-- 
2.25.1


From 36e020c9d120712e683840bfc90a8bf590e51c1b Mon Sep 17 00:00:00 2001
From: GoodnessJames <akomagoodness97@gmail.com>
Date: Fri, 27 Oct 2023 00:48:49 +0100
Subject: [PATCH 2/2] Modify graph component of the App

---
 src/Graph.tsx | 21 ++++++++++++++++++---
 1 file changed, 18 insertions(+), 3 deletions(-)

diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..31bf545 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,8 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
+  // Enable the `PerspectiveViewerElement` to behave like an HTMLElement
   load: (table: Table) => void,
 }
 
@@ -32,7 +33,7 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -47,8 +48,22 @@ class Graph extends Component<IProps, {}> {
     if (this.table) {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
 
-      // Add more Perspective configurations here.
+      // Addition of more Perspective configurations.
       elem.load(this.table);
+      // View is set to y_line for a continuous line graph
+      elem.setAttribute('view', 'y_line');
+      // colum-pivots helps to distinguish stock ABC from DEF
+      elem.setAttribute('colum-pivots', '["stock"]');
+      // row-pivots allow for mapping of datapoints based on its timestamp
+      elem.setAttribute('row-pivots', '["timestamp"]');
+      // columns allows focus on a particular part of a stock’s data along the y-axis
+      elem.setAttribute('colums', '["top_ask_price"]');
+      // aggregates helps to handle duplicated data and consolidate it into a single data point.
+      elem.setAttribute('aggregiates', `
+        { "stock": "distinct count",
+         "top_ask_price": "avg",
+         "top_bid_price": "avg",
+         "timestamp": "distinct count"}`);
     }
   }
 
-- 
2.25.1

